use ssbh_data_py::matl_data::*;
use ssbh_data_py::Pyi;
use std::fs::File;
use std::io::{BufWriter, Write};

fn generate_pyi_file(file_path: &str, functions: &[&str], class_definitions: &[String]) {
    let mut f = BufWriter::new(File::create(file_path).unwrap());
    writeln!(&mut f, "# File automatically generated by build.rs.").unwrap();
    writeln!(&mut f, "# Changes made to this file will not be saved.").unwrap();
    writeln!(&mut f, "from typing import List, Tuple, Any, Optional").unwrap();
    writeln!(&mut f).unwrap();
    writeln!(&mut f).unwrap();
    for function in functions {
        writeln!(&mut f, "{}", function).unwrap();
        writeln!(&mut f).unwrap();
        writeln!(&mut f).unwrap();
    }
    for class in class_definitions {
        writeln!(&mut f, "{}", class).unwrap();
        writeln!(&mut f).unwrap();
    }
}

fn main() {
    // TODO: When will this be rerun?
    // TODO: Rerun only if the rust file changes?
    // println!("cargo:rerun-if-changed=src/matl_data.rs");

    // TODO: Find a way to automatically register types?
    // This would avoid having to specify all types in each build.rs file.
    generate_pyi_file(
        "../ssbh_data_py/ssbh_data_py/matl_data.pyi",
        &["def read_matl(path: str) -> MatlData: ..."],
        &[
            MatlData::pyi(),
            MatlEntryData::pyi(),
            BlendStateParam::pyi(),
            FloatParam::pyi(),
            BooleanParam::pyi(),
            Vector4Param::pyi(),
            RasterizerStateParam::pyi(),
            SamplerParam::pyi(),
            TextureParam::pyi(),
            BlendStateData::pyi(),
            RasterizerStateData::pyi(),
            SamplerData::pyi(),
            ParamId::pyi(),
            FillMode::pyi(),
            CullMode::pyi(),
            BlendFactor::pyi(),
            WrapMode::pyi(),
            MinFilter::pyi(),
            MagFilter::pyi(),
            MaxAnisotropy::pyi(),
        ],
    );
}
